syntax = "proto3";
package ratelimit.v1;

import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";

option go_package = "github.com/Int3facechain/ibc-rate-limiting/ratelimit/types";

// Msg service for rate limit txs
service Msg {
  // Gov tx to add a new rate limit
  rpc AddIBCRateLimit(MsgAddIBCRateLimit) returns (MsgAddIBCRateLimitResponse);
  // Gov tx to update an existing rate limit
  rpc UpdateIBCRateLimit(MsgUpdateIBCRateLimit)
      returns (MsgUpdateIBCRateLimitResponse);
  // Gov tx to remove a rate limit
  rpc RemoveIBCRateLimit(MsgRemoveIBCRateLimit)
      returns (MsgRemoveIBCRateLimitResponse);
  // Gov tx to reset the flow on a rate limit
  rpc ResetIBCRateLimit(MsgResetIBCRateLimit)
      returns (MsgResetIBCRateLimitResponse);
}

// Gov tx to add a new rate limit
message MsgAddIBCRateLimit {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "ibcratelimit/MsgAddIBCRateLimit";

  // Authority defines the x/gov module account
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // Denom for the rate limit, as it appears on the rate limited chain
  // When rate limiting a non-native token, this will be an ibc denom
  string denom = 2;
  // ChannelId for the rate limit, on the side of the rate limited chain
  string channel_id = 3;
  // MaxPercentSend defines the threshold for outflows
  // The threshold is defined as a percentage (e.g. 10 indicates 10%)
  string max_percent_send = 4 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  // MaxPercentSend defines the threshold for inflows
  // The threshold is defined as a percentage (e.g. 10 indicates 10%)
  string max_percent_recv = 5 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  // DurationHours specifies the number of hours before the rate limit
  // is reset (e.g. 24 indicates that the rate limit is reset each day)
  uint64 duration_hours = 6;
}
message MsgAddIBCRateLimitResponse {}

// Gov tx to update an existing rate limit
message MsgUpdateIBCRateLimit {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "ibcratelimit/MsgUpdateIBCRateLimit";

  // Authority defines the x/gov module account
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // Denom for the rate limit, as it appears on the rate limited chain
  // When rate limiting a non-native token, this will be an ibc denom
  string denom = 2;
  // ChannelId for the rate limit, on the side of the rate limited chain
  string channel_id = 3;
  // MaxPercentSend defines the threshold for outflows
  // The threshold is defined as a percentage (e.g. 10 indicates 10%)
  string max_percent_send = 4 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  // MaxPercentSend defines the threshold for inflows
  // The threshold is defined as a percentage (e.g. 10 indicates 10%)
  string max_percent_recv = 5 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  // DurationHours specifies the number of hours before the rate limit
  // is reset (e.g. 24 indicates that the rate limit is reset each day)
  uint64 duration_hours = 6;
}
message MsgUpdateIBCRateLimitResponse {}

// Gov tx to remove a rate limit
message MsgRemoveIBCRateLimit {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "ibcratelimit/MsgRemoveIBCRateLimit";

  // Authority defines the x/gov module account
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // Denom for the rate limit, as it appears on the rate limited chain
  // When rate limiting a non-native token, this will be an ibc denom
  string denom = 2;
  // ChannelId for the rate limit, on the side of the rate limited chain
  string channel_id = 3;
}
message MsgRemoveIBCRateLimitResponse {}

// Gov tx to reset the flow on a rate limit
message MsgResetIBCRateLimit {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "ibcratelimit/MsgResetIBCRateLimit";

  // Authority defines the x/gov module account
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // Denom for the rate limit, as it appears on the rate limited chain
  // When rate limiting a non-native token, this will be an ibc denom
  string denom = 2;
  // ChannelId for the rate limit, on the side of the rate limited chain
  string channel_id = 3;
}
message MsgResetIBCRateLimitResponse {}
