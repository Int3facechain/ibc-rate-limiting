// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ratelimit/v1/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Gov tx to add a new rate limit
type MsgAddIBCRateLimit struct {
	// Authority defines the x/gov module account
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// Denom for the rate limit, as it appears on the rate limited chain
	// When rate limiting a non-native token, this will be an ibc denom
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	// ChannelId for the rate limit, on the side of the rate limited chain
	ChannelId string `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// MaxPercentSend defines the threshold for outflows
	// The threshold is defined as a percentage (e.g. 10 indicates 10%)
	MaxPercentSend cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=max_percent_send,json=maxPercentSend,proto3,customtype=cosmossdk.io/math.Int" json:"max_percent_send"`
	// MaxPercentSend defines the threshold for inflows
	// The threshold is defined as a percentage (e.g. 10 indicates 10%)
	MaxPercentRecv cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=max_percent_recv,json=maxPercentRecv,proto3,customtype=cosmossdk.io/math.Int" json:"max_percent_recv"`
	// DurationHours specifies the number of hours before the rate limit
	// is reset (e.g. 24 indicates that the rate limit is reset each day)
	DurationHours uint64 `protobuf:"varint,6,opt,name=duration_hours,json=durationHours,proto3" json:"duration_hours,omitempty"`
}

func (m *MsgAddIBCRateLimit) Reset()         { *m = MsgAddIBCRateLimit{} }
func (m *MsgAddIBCRateLimit) String() string { return proto.CompactTextString(m) }
func (*MsgAddIBCRateLimit) ProtoMessage()    {}
func (*MsgAddIBCRateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_415b1435b4efaad0, []int{0}
}
func (m *MsgAddIBCRateLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddIBCRateLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddIBCRateLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddIBCRateLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddIBCRateLimit.Merge(m, src)
}
func (m *MsgAddIBCRateLimit) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddIBCRateLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddIBCRateLimit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddIBCRateLimit proto.InternalMessageInfo

func (m *MsgAddIBCRateLimit) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgAddIBCRateLimit) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgAddIBCRateLimit) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *MsgAddIBCRateLimit) GetDurationHours() uint64 {
	if m != nil {
		return m.DurationHours
	}
	return 0
}

type MsgAddIBCRateLimitResponse struct {
}

func (m *MsgAddIBCRateLimitResponse) Reset()         { *m = MsgAddIBCRateLimitResponse{} }
func (m *MsgAddIBCRateLimitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddIBCRateLimitResponse) ProtoMessage()    {}
func (*MsgAddIBCRateLimitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_415b1435b4efaad0, []int{1}
}
func (m *MsgAddIBCRateLimitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddIBCRateLimitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddIBCRateLimitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddIBCRateLimitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddIBCRateLimitResponse.Merge(m, src)
}
func (m *MsgAddIBCRateLimitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddIBCRateLimitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddIBCRateLimitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddIBCRateLimitResponse proto.InternalMessageInfo

// Gov tx to update an existing rate limit
type MsgUpdateIBCRateLimit struct {
	// Authority defines the x/gov module account
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// Denom for the rate limit, as it appears on the rate limited chain
	// When rate limiting a non-native token, this will be an ibc denom
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	// ChannelId for the rate limit, on the side of the rate limited chain
	ChannelId string `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// MaxPercentSend defines the threshold for outflows
	// The threshold is defined as a percentage (e.g. 10 indicates 10%)
	MaxPercentSend cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=max_percent_send,json=maxPercentSend,proto3,customtype=cosmossdk.io/math.Int" json:"max_percent_send"`
	// MaxPercentSend defines the threshold for inflows
	// The threshold is defined as a percentage (e.g. 10 indicates 10%)
	MaxPercentRecv cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=max_percent_recv,json=maxPercentRecv,proto3,customtype=cosmossdk.io/math.Int" json:"max_percent_recv"`
	// DurationHours specifies the number of hours before the rate limit
	// is reset (e.g. 24 indicates that the rate limit is reset each day)
	DurationHours uint64 `protobuf:"varint,6,opt,name=duration_hours,json=durationHours,proto3" json:"duration_hours,omitempty"`
}

func (m *MsgUpdateIBCRateLimit) Reset()         { *m = MsgUpdateIBCRateLimit{} }
func (m *MsgUpdateIBCRateLimit) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateIBCRateLimit) ProtoMessage()    {}
func (*MsgUpdateIBCRateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_415b1435b4efaad0, []int{2}
}
func (m *MsgUpdateIBCRateLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateIBCRateLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateIBCRateLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateIBCRateLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateIBCRateLimit.Merge(m, src)
}
func (m *MsgUpdateIBCRateLimit) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateIBCRateLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateIBCRateLimit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateIBCRateLimit proto.InternalMessageInfo

func (m *MsgUpdateIBCRateLimit) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateIBCRateLimit) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgUpdateIBCRateLimit) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *MsgUpdateIBCRateLimit) GetDurationHours() uint64 {
	if m != nil {
		return m.DurationHours
	}
	return 0
}

type MsgUpdateIBCRateLimitResponse struct {
}

func (m *MsgUpdateIBCRateLimitResponse) Reset()         { *m = MsgUpdateIBCRateLimitResponse{} }
func (m *MsgUpdateIBCRateLimitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateIBCRateLimitResponse) ProtoMessage()    {}
func (*MsgUpdateIBCRateLimitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_415b1435b4efaad0, []int{3}
}
func (m *MsgUpdateIBCRateLimitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateIBCRateLimitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateIBCRateLimitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateIBCRateLimitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateIBCRateLimitResponse.Merge(m, src)
}
func (m *MsgUpdateIBCRateLimitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateIBCRateLimitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateIBCRateLimitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateIBCRateLimitResponse proto.InternalMessageInfo

// Gov tx to remove a rate limit
type MsgRemoveIBCRateLimit struct {
	// Authority defines the x/gov module account
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// Denom for the rate limit, as it appears on the rate limited chain
	// When rate limiting a non-native token, this will be an ibc denom
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	// ChannelId for the rate limit, on the side of the rate limited chain
	ChannelId string `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (m *MsgRemoveIBCRateLimit) Reset()         { *m = MsgRemoveIBCRateLimit{} }
func (m *MsgRemoveIBCRateLimit) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveIBCRateLimit) ProtoMessage()    {}
func (*MsgRemoveIBCRateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_415b1435b4efaad0, []int{4}
}
func (m *MsgRemoveIBCRateLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveIBCRateLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveIBCRateLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveIBCRateLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveIBCRateLimit.Merge(m, src)
}
func (m *MsgRemoveIBCRateLimit) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveIBCRateLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveIBCRateLimit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveIBCRateLimit proto.InternalMessageInfo

func (m *MsgRemoveIBCRateLimit) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgRemoveIBCRateLimit) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgRemoveIBCRateLimit) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

type MsgRemoveIBCRateLimitResponse struct {
}

func (m *MsgRemoveIBCRateLimitResponse) Reset()         { *m = MsgRemoveIBCRateLimitResponse{} }
func (m *MsgRemoveIBCRateLimitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveIBCRateLimitResponse) ProtoMessage()    {}
func (*MsgRemoveIBCRateLimitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_415b1435b4efaad0, []int{5}
}
func (m *MsgRemoveIBCRateLimitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveIBCRateLimitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveIBCRateLimitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveIBCRateLimitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveIBCRateLimitResponse.Merge(m, src)
}
func (m *MsgRemoveIBCRateLimitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveIBCRateLimitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveIBCRateLimitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveIBCRateLimitResponse proto.InternalMessageInfo

// Gov tx to reset the flow on a rate limit
type MsgResetIBCRateLimit struct {
	// Authority defines the x/gov module account
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// Denom for the rate limit, as it appears on the rate limited chain
	// When rate limiting a non-native token, this will be an ibc denom
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	// ChannelId for the rate limit, on the side of the rate limited chain
	ChannelId string `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (m *MsgResetIBCRateLimit) Reset()         { *m = MsgResetIBCRateLimit{} }
func (m *MsgResetIBCRateLimit) String() string { return proto.CompactTextString(m) }
func (*MsgResetIBCRateLimit) ProtoMessage()    {}
func (*MsgResetIBCRateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_415b1435b4efaad0, []int{6}
}
func (m *MsgResetIBCRateLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgResetIBCRateLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgResetIBCRateLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgResetIBCRateLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgResetIBCRateLimit.Merge(m, src)
}
func (m *MsgResetIBCRateLimit) XXX_Size() int {
	return m.Size()
}
func (m *MsgResetIBCRateLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgResetIBCRateLimit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgResetIBCRateLimit proto.InternalMessageInfo

func (m *MsgResetIBCRateLimit) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgResetIBCRateLimit) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgResetIBCRateLimit) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

type MsgResetIBCRateLimitResponse struct {
}

func (m *MsgResetIBCRateLimitResponse) Reset()         { *m = MsgResetIBCRateLimitResponse{} }
func (m *MsgResetIBCRateLimitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgResetIBCRateLimitResponse) ProtoMessage()    {}
func (*MsgResetIBCRateLimitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_415b1435b4efaad0, []int{7}
}
func (m *MsgResetIBCRateLimitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgResetIBCRateLimitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgResetIBCRateLimitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgResetIBCRateLimitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgResetIBCRateLimitResponse.Merge(m, src)
}
func (m *MsgResetIBCRateLimitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgResetIBCRateLimitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgResetIBCRateLimitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgResetIBCRateLimitResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAddIBCRateLimit)(nil), "ratelimit.v1.MsgAddIBCRateLimit")
	proto.RegisterType((*MsgAddIBCRateLimitResponse)(nil), "ratelimit.v1.MsgAddIBCRateLimitResponse")
	proto.RegisterType((*MsgUpdateIBCRateLimit)(nil), "ratelimit.v1.MsgUpdateIBCRateLimit")
	proto.RegisterType((*MsgUpdateIBCRateLimitResponse)(nil), "ratelimit.v1.MsgUpdateIBCRateLimitResponse")
	proto.RegisterType((*MsgRemoveIBCRateLimit)(nil), "ratelimit.v1.MsgRemoveIBCRateLimit")
	proto.RegisterType((*MsgRemoveIBCRateLimitResponse)(nil), "ratelimit.v1.MsgRemoveIBCRateLimitResponse")
	proto.RegisterType((*MsgResetIBCRateLimit)(nil), "ratelimit.v1.MsgResetIBCRateLimit")
	proto.RegisterType((*MsgResetIBCRateLimitResponse)(nil), "ratelimit.v1.MsgResetIBCRateLimitResponse")
}

func init() { proto.RegisterFile("ratelimit/v1/tx.proto", fileDescriptor_415b1435b4efaad0) }

var fileDescriptor_415b1435b4efaad0 = []byte{
	// 587 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0x3f, 0x6f, 0xd3, 0x4e,
	0x18, 0x8e, 0x93, 0xb6, 0x52, 0x4e, 0xbf, 0x5f, 0xa1, 0x56, 0x22, 0x8c, 0xd5, 0x38, 0xc1, 0x08,
	0x29, 0x0a, 0x8a, 0xad, 0xb6, 0xc0, 0xd0, 0xad, 0x61, 0x80, 0x48, 0x44, 0x42, 0x2e, 0x2c, 0x48,
	0x28, 0xba, 0xf8, 0xae, 0xf6, 0x89, 0xde, 0x5d, 0xe4, 0xbb, 0x44, 0xe9, 0xca, 0xc8, 0xc4, 0xca,
	0xb7, 0xe8, 0xc0, 0x82, 0xf8, 0x02, 0x1d, 0x2b, 0x26, 0xc4, 0x50, 0xa1, 0x64, 0xe8, 0xc6, 0xc4,
	0x07, 0x40, 0xb6, 0xf3, 0xa7, 0xca, 0x19, 0xb5, 0x9d, 0xba, 0xb0, 0x44, 0xb9, 0xe7, 0x7d, 0xee,
	0x7d, 0xfc, 0xf8, 0x79, 0xef, 0x0c, 0xca, 0x11, 0x94, 0xf8, 0x90, 0x50, 0x22, 0xdd, 0xe1, 0x96,
	0x2b, 0x47, 0x4e, 0x3f, 0xe2, 0x92, 0xeb, 0xff, 0xcd, 0x61, 0x67, 0xb8, 0x65, 0x96, 0x02, 0x1e,
	0xf0, 0xa4, 0xe0, 0xc6, 0xff, 0x52, 0x8e, 0xb9, 0x01, 0x29, 0x61, 0xdc, 0x4d, 0x7e, 0xa7, 0xd0,
	0x5d, 0x9f, 0x0b, 0xca, 0x45, 0x37, 0xe5, 0xa6, 0x8b, 0x69, 0xe9, 0x4e, 0xba, 0x72, 0xa9, 0x08,
	0x62, 0x25, 0x2a, 0x82, 0xb4, 0x60, 0xff, 0xca, 0x03, 0xbd, 0x23, 0x82, 0x3d, 0x84, 0xda, 0xad,
	0xa7, 0x1e, 0x94, 0xf8, 0x45, 0x2c, 0xab, 0x3f, 0x01, 0x45, 0x38, 0x90, 0x21, 0x8f, 0x88, 0x3c,
	0x32, 0xb4, 0x9a, 0x56, 0x2f, 0xb6, 0x8c, 0x6f, 0x9f, 0x9b, 0xa5, 0x69, 0xd3, 0x3d, 0x84, 0x22,
	0x2c, 0xc4, 0xbe, 0x8c, 0x08, 0x0b, 0xbc, 0x05, 0x55, 0x2f, 0x81, 0x55, 0x84, 0x19, 0xa7, 0x46,
	0x3e, 0xde, 0xe3, 0xa5, 0x0b, 0xbd, 0x02, 0x80, 0x1f, 0x42, 0xc6, 0xf0, 0x61, 0x97, 0x20, 0xa3,
	0x90, 0x94, 0x8a, 0x53, 0xa4, 0x8d, 0xf4, 0x67, 0xe0, 0x36, 0x85, 0xa3, 0x6e, 0x1f, 0x47, 0x3e,
	0x66, 0xb2, 0x2b, 0x30, 0x43, 0xc6, 0x4a, 0xa2, 0x59, 0x39, 0x39, 0xab, 0xe6, 0x7e, 0x9c, 0x55,
	0xcb, 0xa9, 0xae, 0x40, 0xef, 0x1c, 0xc2, 0x5d, 0x0a, 0x65, 0xe8, 0xb4, 0x99, 0xf4, 0xd6, 0x29,
	0x1c, 0xbd, 0x4c, 0x77, 0xed, 0x63, 0xa6, 0x34, 0x8a, 0xb0, 0x3f, 0x34, 0x56, 0xaf, 0xd9, 0xc8,
	0xc3, 0xfe, 0x50, 0x7f, 0x00, 0xd6, 0xd1, 0x20, 0x82, 0x92, 0x70, 0xd6, 0x0d, 0xf9, 0x20, 0x12,
	0xc6, 0x5a, 0x4d, 0xab, 0xaf, 0x78, 0xff, 0xcf, 0xd0, 0xe7, 0x31, 0xb8, 0xbb, 0xfd, 0xfe, 0xfc,
	0xb8, 0xb1, 0x70, 0xff, 0xe1, 0xfc, 0xb8, 0x51, 0x25, 0x3d, 0x7f, 0x11, 0xaa, 0xfa, 0x66, 0xed,
	0x4d, 0x60, 0xaa, 0xa8, 0x87, 0x45, 0x9f, 0x33, 0x81, 0xed, 0xdf, 0x79, 0x50, 0xee, 0x88, 0xe0,
	0x75, 0x1f, 0x41, 0x89, 0xff, 0x25, 0x72, 0xed, 0x44, 0x1e, 0xab, 0x89, 0xd8, 0xcb, 0x89, 0xa8,
	0x2f, 0xd7, 0xae, 0x82, 0x4a, 0x66, 0x61, 0x9e, 0xcb, 0x57, 0x2d, 0xc9, 0xc5, 0xc3, 0x94, 0x0f,
	0x6f, 0x2e, 0x97, 0x2b, 0xd9, 0x53, 0x9f, 0x71, 0x6a, 0x4f, 0x2d, 0xcc, 0xed, 0x7d, 0xd1, 0x40,
	0x29, 0x61, 0x08, 0x2c, 0x6f, 0xce, 0xdd, 0x23, 0xd5, 0xdd, 0x3d, 0xd5, 0xdd, 0xd2, 0x23, 0xda,
	0x16, 0xd8, 0xcc, 0xc2, 0x67, 0xde, 0xb6, 0x3f, 0x15, 0x40, 0xa1, 0x23, 0x02, 0xfd, 0x2d, 0xb8,
	0xb5, 0x7c, 0xcb, 0xd5, 0x9c, 0x8b, 0x17, 0xad, 0xa3, 0x9e, 0x4b, 0xb3, 0x7e, 0x19, 0x63, 0x26,
	0xa3, 0x1f, 0x00, 0x3d, 0xe3, 0xd4, 0xde, 0x57, 0xf6, 0xab, 0x24, 0xf3, 0xe1, 0x15, 0x48, 0x17,
	0x75, 0x32, 0xa6, 0x50, 0xd5, 0x51, 0x49, 0x19, 0x3a, 0x7f, 0x1f, 0x09, 0xdd, 0x07, 0x1b, 0xea,
	0x38, 0xd8, 0x19, 0x1d, 0x96, 0x38, 0x66, 0xe3, 0x72, 0xce, 0x4c, 0xa4, 0xf5, 0xea, 0x64, 0x6c,
	0x69, 0xa7, 0x63, 0x4b, 0xfb, 0x39, 0xb6, 0xb4, 0x8f, 0x13, 0x2b, 0x77, 0x3a, 0xb1, 0x72, 0xdf,
	0x27, 0x56, 0xee, 0xcd, 0x6e, 0x40, 0x64, 0x38, 0xe8, 0x39, 0x3e, 0xa7, 0x6e, 0x9b, 0xc9, 0x9d,
	0x03, 0xe8, 0x63, 0x3f, 0x84, 0x84, 0xb9, 0xa4, 0xe7, 0x37, 0x63, 0x85, 0x66, 0x22, 0x41, 0x58,
	0xe0, 0x2e, 0x06, 0x44, 0x1e, 0xf5, 0xb1, 0xe8, 0xad, 0x25, 0x9f, 0xb6, 0x9d, 0x3f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x06, 0x1f, 0xf6, 0xae, 0x5e, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Gov tx to add a new rate limit
	AddIBCRateLimit(ctx context.Context, in *MsgAddIBCRateLimit, opts ...grpc.CallOption) (*MsgAddIBCRateLimitResponse, error)
	// Gov tx to update an existing rate limit
	UpdateIBCRateLimit(ctx context.Context, in *MsgUpdateIBCRateLimit, opts ...grpc.CallOption) (*MsgUpdateIBCRateLimitResponse, error)
	// Gov tx to remove a rate limit
	RemoveIBCRateLimit(ctx context.Context, in *MsgRemoveIBCRateLimit, opts ...grpc.CallOption) (*MsgRemoveIBCRateLimitResponse, error)
	// Gov tx to reset the flow on a rate limit
	ResetIBCRateLimit(ctx context.Context, in *MsgResetIBCRateLimit, opts ...grpc.CallOption) (*MsgResetIBCRateLimitResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddIBCRateLimit(ctx context.Context, in *MsgAddIBCRateLimit, opts ...grpc.CallOption) (*MsgAddIBCRateLimitResponse, error) {
	out := new(MsgAddIBCRateLimitResponse)
	err := c.cc.Invoke(ctx, "/ratelimit.v1.Msg/AddIBCRateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateIBCRateLimit(ctx context.Context, in *MsgUpdateIBCRateLimit, opts ...grpc.CallOption) (*MsgUpdateIBCRateLimitResponse, error) {
	out := new(MsgUpdateIBCRateLimitResponse)
	err := c.cc.Invoke(ctx, "/ratelimit.v1.Msg/UpdateIBCRateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveIBCRateLimit(ctx context.Context, in *MsgRemoveIBCRateLimit, opts ...grpc.CallOption) (*MsgRemoveIBCRateLimitResponse, error) {
	out := new(MsgRemoveIBCRateLimitResponse)
	err := c.cc.Invoke(ctx, "/ratelimit.v1.Msg/RemoveIBCRateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ResetIBCRateLimit(ctx context.Context, in *MsgResetIBCRateLimit, opts ...grpc.CallOption) (*MsgResetIBCRateLimitResponse, error) {
	out := new(MsgResetIBCRateLimitResponse)
	err := c.cc.Invoke(ctx, "/ratelimit.v1.Msg/ResetIBCRateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Gov tx to add a new rate limit
	AddIBCRateLimit(context.Context, *MsgAddIBCRateLimit) (*MsgAddIBCRateLimitResponse, error)
	// Gov tx to update an existing rate limit
	UpdateIBCRateLimit(context.Context, *MsgUpdateIBCRateLimit) (*MsgUpdateIBCRateLimitResponse, error)
	// Gov tx to remove a rate limit
	RemoveIBCRateLimit(context.Context, *MsgRemoveIBCRateLimit) (*MsgRemoveIBCRateLimitResponse, error)
	// Gov tx to reset the flow on a rate limit
	ResetIBCRateLimit(context.Context, *MsgResetIBCRateLimit) (*MsgResetIBCRateLimitResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AddIBCRateLimit(ctx context.Context, req *MsgAddIBCRateLimit) (*MsgAddIBCRateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIBCRateLimit not implemented")
}
func (*UnimplementedMsgServer) UpdateIBCRateLimit(ctx context.Context, req *MsgUpdateIBCRateLimit) (*MsgUpdateIBCRateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIBCRateLimit not implemented")
}
func (*UnimplementedMsgServer) RemoveIBCRateLimit(ctx context.Context, req *MsgRemoveIBCRateLimit) (*MsgRemoveIBCRateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIBCRateLimit not implemented")
}
func (*UnimplementedMsgServer) ResetIBCRateLimit(ctx context.Context, req *MsgResetIBCRateLimit) (*MsgResetIBCRateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetIBCRateLimit not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AddIBCRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddIBCRateLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddIBCRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ratelimit.v1.Msg/AddIBCRateLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddIBCRateLimit(ctx, req.(*MsgAddIBCRateLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateIBCRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateIBCRateLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateIBCRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ratelimit.v1.Msg/UpdateIBCRateLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateIBCRateLimit(ctx, req.(*MsgUpdateIBCRateLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveIBCRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveIBCRateLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveIBCRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ratelimit.v1.Msg/RemoveIBCRateLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveIBCRateLimit(ctx, req.(*MsgRemoveIBCRateLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ResetIBCRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgResetIBCRateLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ResetIBCRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ratelimit.v1.Msg/ResetIBCRateLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ResetIBCRateLimit(ctx, req.(*MsgResetIBCRateLimit))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ratelimit.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddIBCRateLimit",
			Handler:    _Msg_AddIBCRateLimit_Handler,
		},
		{
			MethodName: "UpdateIBCRateLimit",
			Handler:    _Msg_UpdateIBCRateLimit_Handler,
		},
		{
			MethodName: "RemoveIBCRateLimit",
			Handler:    _Msg_RemoveIBCRateLimit_Handler,
		},
		{
			MethodName: "ResetIBCRateLimit",
			Handler:    _Msg_ResetIBCRateLimit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ratelimit/v1/tx.proto",
}

func (m *MsgAddIBCRateLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddIBCRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddIBCRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DurationHours != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DurationHours))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.MaxPercentRecv.Size()
		i -= size
		if _, err := m.MaxPercentRecv.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.MaxPercentSend.Size()
		i -= size
		if _, err := m.MaxPercentSend.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddIBCRateLimitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddIBCRateLimitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddIBCRateLimitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateIBCRateLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateIBCRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateIBCRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DurationHours != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DurationHours))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.MaxPercentRecv.Size()
		i -= size
		if _, err := m.MaxPercentRecv.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.MaxPercentSend.Size()
		i -= size
		if _, err := m.MaxPercentSend.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateIBCRateLimitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateIBCRateLimitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateIBCRateLimitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveIBCRateLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveIBCRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveIBCRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveIBCRateLimitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveIBCRateLimitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveIBCRateLimitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgResetIBCRateLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgResetIBCRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgResetIBCRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgResetIBCRateLimitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgResetIBCRateLimitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgResetIBCRateLimitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAddIBCRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MaxPercentSend.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.MaxPercentRecv.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.DurationHours != 0 {
		n += 1 + sovTx(uint64(m.DurationHours))
	}
	return n
}

func (m *MsgAddIBCRateLimitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateIBCRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MaxPercentSend.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.MaxPercentRecv.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.DurationHours != 0 {
		n += 1 + sovTx(uint64(m.DurationHours))
	}
	return n
}

func (m *MsgUpdateIBCRateLimitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveIBCRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveIBCRateLimitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgResetIBCRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgResetIBCRateLimitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAddIBCRateLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddIBCRateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddIBCRateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPercentSend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxPercentSend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPercentRecv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxPercentRecv.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationHours", wireType)
			}
			m.DurationHours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationHours |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddIBCRateLimitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddIBCRateLimitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddIBCRateLimitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateIBCRateLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateIBCRateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateIBCRateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPercentSend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxPercentSend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPercentRecv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxPercentRecv.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationHours", wireType)
			}
			m.DurationHours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationHours |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateIBCRateLimitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateIBCRateLimitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateIBCRateLimitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveIBCRateLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveIBCRateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveIBCRateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveIBCRateLimitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveIBCRateLimitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveIBCRateLimitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgResetIBCRateLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgResetIBCRateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgResetIBCRateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgResetIBCRateLimitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgResetIBCRateLimitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgResetIBCRateLimitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
